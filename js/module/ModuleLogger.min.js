class GrayLogTransport{constructor(options){this.server=options.server||"127.0.0.1",this.port=options.port||12201,this.source=options.hostname||"plcDefault",this.facility=options.facility||"HorizonPLC",this.bufferSize=options.bufferSize||1350,this.socket=require("dgram").createSocket("udp4")}Log(_msg,level,level_desc,srvc,obj){let msg={version:"1.1",host:this.source,facility:this.facility,level:level,message:_msg,level_desc:level_desc,service:srvc,full_message:obj,service_bus:"appBus"},toSend=JSON.stringify(msg);Process._Wifi.UDPHost(this.server,this.port),this.socket.send(toSend,0,toSend.length,this.port,this.server,(err,bytes)=>{(err||bytes>this.bufferSize)&&console.log("Cannot send UDP socket")})}}class ClassLogger{constructor(){this._Enabled=!0,this._Glog=new GrayLogTransport(Process._LogCreds)}set Enabled(flag){return"boolean"==typeof flag&&(this._Enabled=flag,!0)}get LogLevel(){return{CRITICAL:2,ERROR:3,WARN:4,NOTICE:5,INFO:6,DEBUG:7}}Log(service,qlfier,msg,obj){if(!this._Enabled)return;const logdesc=["CRITICAL","ERROR","WARN","NOTICE","INFO","DEBUG"];1==Process._HaveWiFi&&this._Glog.Log(msg,qlfier,logdesc[qlfier-2],service,obj),console.log(`[${Process.GetSystemTime()}] ${service} | ${logdesc[qlfier-2]} | ${msg}`)}}exports=ClassLogger;